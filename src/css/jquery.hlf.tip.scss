$_side-snap-side-map: (right: y, left: y, bottom: x, top: x);
$_side-inverse-map: (right: left, left: right, bottom: top, top: bottom);

@mixin tip-base {
  display: none;
  position: absolute;
  > .js-tip-inner {
    position: relative;
  }
  .js-tip-stem {
    border: 0 solid transparent; width: 0; height: 0; // Initial values.
    background: none;
    position: absolute;
  }
  .js-tip-content {
    overflow: hidden;
    position: relative;
  }
}

@mixin tip-skin($fill-color, $text-color, $stem-color: null)
{
  $stem-color: $fill-color !default;
  .js-tip-content {
    background-color: $fill-color;
    color: $text-color;
  }
  @each $side, $snap-side in $_side-snap-side-map {
    &.js-tip-#{$side} { &.js-snap-tip-#{$snap-side}-side, & { .js-tip-stem {
      border: {
        color: transparent; // Reset.
        #{$side}-color: $stem-color;
      }
    }}}
  }
}

// Include in root.
@mixin tip-layout($baseline: 12px,
                  $content-padding-em: 2/3 1 5/6 1,
                  $max-width-em: 18,
                  $stem-size-em: 1,
                  $stem-wide-base-em: 1.5,
                  $z-index: 9999)
{
  $max-width: $max-width-em * $baseline;
  $stem-size: round($stem-size-em * $baseline);
  $stem-wide-base: round($stem-wide-base-em * $stem-size-em * $baseline);
  $content-padding: '';
  $i: 0;
  @each $em in $content-padding-em {
    $content-padding: $content-padding + ($em * $baseline);
    $i: $i + 1;
    @if $i < length($content-padding-em) {
      $content-padding: $content-padding + ' ';
    }
  }
  z-index: $z-index;
  .js-tip-inner {
    max-width: $max-width;
  }
  .js-tip-content {
    padding: #{$content-padding};
  }
  @each $side, $snap-side in $_side-snap-side-map {
    &.js-tip-#{$side} { &.js-snap-tip-#{$snap-side}-side, & { .js-tip-stem {
      border-#{$side}-width: $stem-size;
      & + .js-tip-content {
        @if $snap-side == x {
          left: auto; right: auto; // Reset.
          @if $side == top { bottom: $stem-size; }
          @if $side == bottom { top: $stem-size; }
        } 
        @if $snap-side == y {
          top: auto; bottom: auto; // Reset.
          @if $side == left { right: $stem-size; }
          @if $side == right { left: $stem-size; }
        }
      }
      #{map-get($_side-inverse-map, $side)}: 0;
    }}}
  }
  &.js-snap-tip-x-side .js-tip-stem {
    border: {
      color: transparent; // Partial reset.
      width: 0 ($stem-wide-base / 2);
    }
    left: 50%;
    margin-left: -$stem-wide-base / 2; // Center.
  }
  &.js-snap-tip-y-side .js-tip-stem {
    border: {
      color: transparent; // Partial reset.
      width: ($stem-wide-base / 2) 0;
    }
    margin-top: -$stem-wide-base / 2; // Center.
    top: 50%;
  }
}
