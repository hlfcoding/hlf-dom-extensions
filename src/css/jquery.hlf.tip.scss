/*
  HLF Tip jQuery Plugin
  =====================
  There should be no css output from this file.
*/

// The main responsibility for the required plugin styling is to provide
// required layout styles but allow easy customization of skin styles, ie.
// colors, fonts, borders, shadows.

// Internal
// --------

// Note the order in this map used to styling the tip based on its side classes.
// Because it gets more than one side class, the style for the side class that's
// later wins. So we want the vertical side class styling to override any
// horizontal side ones.
$_side-snap-side-map: (right: y, left: y, bottom: x, top: x);
$_side-inverse-map: (right: left, left: right, bottom: top, top: bottom);

// ‚ùß

// Mixins
// ------

// ùíá `tip-base` should always be included. It contains the basic styles for tips
// to display and position correctly that rarely need to re-implementation. The
// resulting DOM structure looks like:
// ```html
// <div class="js-tip">
//   <div class="js-tip-inner">
//     <div class="js-tip-stem"></div>
//     <div class="js-tip-content">...</div>
//   </div>
// </div>
// ```
@mixin tip-base {
  display: none;
  position: absolute;
  > .js-tip-inner {
    position: relative;
  }
  .js-tip-stem {
    border: 0 solid transparent; width: 0; height: 0; // Initial values.
    background: none;
    position: absolute;
  }
  .js-tip-content {
    overflow: hidden;
    position: relative;
  }
}

// ùíá `tip-layout` should be included unless you want to implement your own tip
// layout, specifically around tip stem position. The sizing logic structures
// around `em-size`. Most of this mixin is handling the variations of classes on
// the tip element. For example:
// ```html
// <div class="js-tip js-snap-tip js-tip-follow js-tip-bottom js-tip-right js-snap-tip-trigger js-snap-tip-x-side">
// ```
@mixin tip-layout($em-size: 12px,
                  $content-padding-em: 2/3 1 5/6 1,
                  $max-width-em: 18,
                  $stem-size-em: 1,
                  $stem-wide-base-em: 1.5,
                  $z-index: 9999)
{
  // - First calculate `*-em` parameters into pixels.
  $max-width: $max-width-em * $em-size;
  $stem-size: round($stem-size-em * $em-size);
  $stem-wide-base: round($stem-wide-base-em * $stem-size-em * $em-size);
  $content-padding: ();
  @each $em in $content-padding-em {
    $content-padding: $content-padding ($em * $em-size);
  }
  // - Then for some basic layout styles.
  z-index: $z-index;
  .js-tip-inner {
    max-width: $max-width;
  }
  .js-tip-content {
    padding: #{$content-padding};
  }
  // - Finally start layout for the stem. Finish drawing and positioning the
  //   stem, and offset the content to match the stem size.
  @each $side, $snap-side in $_side-snap-side-map {
    &.js-tip-#{$side} { &.js-snap-tip-#{$snap-side}-side, & { .js-tip-stem {
      border-#{$side}-width: $stem-size;
      & + .js-tip-content {
        @if $snap-side == x {
          left: auto; right: auto; // Reset.
          @if $side == top { bottom: $stem-size; }
          @if $side == bottom { top: $stem-size; }
        } 
        @if $snap-side == y {
          top: auto; bottom: auto; // Reset.
          @if $side == left { right: $stem-size; }
          @if $side == right { left: $stem-size; }
        }
      }
      $inverse-side: map-get($_side-inverse-map, $side);
      @if $inverse-side == right { #{$inverse-side}: -1px; } // To match the JS.
      @else { #{$inverse-side}: 0; }
    }}}
  }
  // - Then make any stem layout adjustments for when the tip is snapping to an
  //   axis. The stem gets centered in this implementation.
  &.js-snap-tip-x-side .js-tip-stem {
    border: {
      color: transparent; // Partial reset.
      width: 0 ($stem-wide-base / 2);
    }
    left: 50%;
    margin-left: -$stem-wide-base / 2;
  }
  &.js-snap-tip-y-side .js-tip-stem {
    border: {
      color: transparent; // Partial reset.
      width: ($stem-wide-base / 2) 0;
    }
    margin-top: -$stem-wide-base / 2;
    top: 50%;
  }
}

// ùíá `tip-skin` is entirely optional and easy to re-implement. You should use it
// if you just need to configure colors.
@mixin tip-skin($fill-color, $text-color, $stem-color: null)
{
  $stem-color: $fill-color !default;
  .js-tip-content {
    background-color: $fill-color;
    color: $text-color;
  }
  @each $side, $snap-side in $_side-snap-side-map {
    &.js-tip-#{$side} { &.js-snap-tip-#{$snap-side}-side, & { .js-tip-stem {
      border: {
        color: transparent; // Reset.
        #{$side}-color: $stem-color;
      }
    }}}
  }
}
