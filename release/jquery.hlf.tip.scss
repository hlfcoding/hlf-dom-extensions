@mixin tip-skin ($fill-color, $text-color, $stem-color:null)
{
  $stem-color: $fill-color !default;
  .js-tip-content {
    background-color: $fill-color;
    color: $text-color;
  }
  // Declaration structure from base styles.
  &.js-tip-east.js-snap-tip-y-side .js-tip-stem, &.js-tip-east .js-tip-stem { @include _stem-skin(right, $stem-color); }
  &.js-tip-west.js-snap-tip-y-side .js-tip-stem, &.js-tip-west .js-tip-stem { @include _stem-skin(left, $stem-color); }
  &.js-tip-south.js-snap-tip-x-side .js-tip-stem, &.js-tip-south .js-tip-stem { @include _stem-skin(bottom, $stem-color); }
  &.js-tip-north.js-snap-tip-x-side .js-tip-stem, &.js-tip-north .js-tip-stem { @include _stem-skin(top, $stem-color); }
}

@mixin _stem-skin ($side, $stem-color) {
  border-color: transparent; // Reset.
  border-#{$side}-color: $stem-color;
}

// Include in root.
@mixin tip-layout ($baseline:12px,
                   $max-width-em:18,
                   $stem-size-em:1,
                   $stem-wide-base-em:1.5,
                   $content-padding-em:2/3 1 5/6 1)
{
  $max-width: $max-width-em * $baseline;
  $stem-size: round($stem-size-em * $baseline);
  $stem-wide-base: round($stem-wide-base-em * $stem-size-em * $baseline);
  // TODO: Simplify.
  $content-padding: '';
  $i: 0;
  @each $em in $content-padding-em {
    $content-padding: $content-padding+($em * $baseline);
    $i: $i+1;
    @if $i < length($content-padding-em) {
      $content-padding: $content-padding+' ';
    }
  }
  .js-tip-inner {
    max-width: $max-width;
  }
  .js-tip-content {
    padding: #{$content-padding};
  }
  // Declaration structure from base styles.
  &.js-tip-east.js-snap-tip-y-side .js-tip-stem, &.js-tip-east .js-tip-stem { @include _stem-layout(right, $stem-size); }
  &.js-tip-west.js-snap-tip-y-side .js-tip-stem, &.js-tip-west .js-tip-stem { @include _stem-layout(left, $stem-size); }
  &.js-tip-south.js-snap-tip-x-side .js-tip-stem, &.js-tip-south .js-tip-stem { @include _stem-layout(bottom, $stem-size); }
  &.js-tip-north.js-snap-tip-x-side .js-tip-stem, &.js-tip-north .js-tip-stem { @include _stem-layout(top, $stem-size); }
  &.js-snap-tip-x-side .js-tip-stem {
    margin-left: -$stem-wide-base/2; // Center.
    border-width: 0 ($stem-wide-base/2);
  }
  &.js-snap-tip-y-side .js-tip-stem {
    margin-top: -$stem-wide-base/2; // Center.
    border-width: ($stem-wide-base/2) 0;
  }
}

@mixin _stem-layout ($side, $stem-size) {
  border-#{$side}-width: $stem-size;
  @if $side == top or $side == bottom {
    &+.js-tip-content {
      left: auto; right: auto; // Reset.
      @if $side == top { bottom: $stem-size; }
      @if $side == bottom { top: $stem-size; }
    }
  } @else if $side == left or $side == right {
    &+.js-tip-content {
      top: auto; bottom: auto; // Reset.
      @if $side == left { right: $stem-size; }
      @if $side == right { left: $stem-size; }
    }
  }
}

// Base
// ----

// Root.
.js-tip {
  position: absolute;
  z-index: 9999;
  display: none;
}
// ->
.js-tip-inner {
  position: relative;
}
// ->
.js-tip-stem {
  border: {
    width: 0;
    style: solid;
    color: transparent;
  }
  background: none;
  position: absolute;
  width: 0;
  height: 0;
  .js-tip-east.js-snap-tip-y-side &, // Reapply.
  .js-tip-east & {
    left: 0;
  }
  .js-tip-west.js-snap-tip-y-side &, // Reapply.
  .js-tip-west & {
    right: 0;
  }
  // By default north and south have precedence in growing the stem, so they
  // come last.
  .js-tip-south.js-snap-tip-x-side &, // Reapply.
  .js-tip-south & {
    top: 0;
  }
  .js-tip-north.js-snap-tip-x-side &, // Reapply.
  .js-tip-north & {
    bottom: 0;
  }
  .js-snap-tip-x-side & {
    left: 50%;
    border-color: transparent; // Partial reset.
  }
  .js-snap-tip-y-side & {
    top: 50%;
    border-color: transparent; // Partial reset.
  }
}
.js-tip-content {
  overflow: hidden;
  position: relative;
  // Position adjusted by to stem style mixin.
}
